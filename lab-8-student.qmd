---
title: "Lab 8: Searching for Efficiency"
author: "Skylar Richards"
format: html
editor: source
embed-resources: true
code-tools: true
code-fold: true
---

```{r}
#| label: pacakges
#| message: false
library(tidyverse)
library(here)
library(kableExtra)
```

For this week's lab, we will be revisiting questions from previous lab
assignments, with the purpose of using functions from the `map()` family to 
iterate over certain tasks. To do this, we will need to load in the data from 
Lab 2, Lab 3, and Lab 7. I've included **all** three datasets in the `data`
folder, so all you need to do is read them in. ðŸ™ƒ 

```{r}
#| label: read-in-old-data
#| message: false
# Data from Lab 2
surveys <- read_csv(here::here("data", "surveys.csv"))

# Data from Lab 3
evals <- read_csv(here::here("data", "teacher_evals.csv")) |> 
  rename(sex = gender)

# Data from Lab 7
fish <- read_csv(here::here("data", "BlackfootFish.csv"))
```

## Lab 2

First up, we're going to revisit Question 3 from Lab 2. This question asked:

> What are the data types of the variables in this dataset?

**1. Using `map_chr()`, produce a nicely formatted table of the data type of each variable in the `surveys` dataset.** Specifically, the table should have 15 columns, one for
each variable, with the datatype of that variable immediately below it's name. 

```{r}
#| label: map-data-types-of-surveys
survey_data_type <- surveys|>
  map_chr(class)|>
  enframe(name = "Variable", value = "DataType")|>
  pivot_wider(names_from = Variable, values_from = DataType)

data_types_pretty <- survey_data_type|>
  kable(caption = "Data Types of Surveys Dataset, by Variable Name") |>
   kable_styling(bootstrap_options = c("striped", "hover", "condensed", "bordered"), 
                 full_width = TRUE, 
                 font_size = 14)
  
data_types_pretty

```

## Lab 3

Now, were on to Lab 3 where we will revisit two questions. 

In the original version of Lab 3, Question 5 asked you to:

> Change data types in whichever way you see fit (e.g., is the instructor ID
> really a numeric data type?)

**2. Using `map_at()`, convert the `teacher_id`, `weekday`, `academic_degree`, `seniority`, and `gender` columns to factors.** Hint: You will need to use `bind_cols()` to transform the 
list output back into a data frame. 

```{r}
#| label: map-to-mutate-columns
evals_revamps <- evals|>
  map_at(c("teacher_id","weekday","academic_degree","seniority","gender"),as.factor)|>
  bind_cols()
  
```

Next up, we're going revisit Question 7 which asked:
> What are the demographics of the instructors in this study? Investigate the
> variables `academic_degree`, `seniority`, and `sex` and summarize your
> findings in ~3 complete sentences.

Many people created **multiple** tables of counts for each of these
demographics, but in this exercise we are going to create **one** table with 
every demographic.

**3. Using `pivot_longer()` and `pivot_wider()`, recreate the table below.** 

![](images/lab-8-table-to-recreate.png)

::: {.callout-tip}
I'm using the `sen_level` classification from Challenge 3

- `"junior"` = `seniority` is 4 or less (inclusive)
- `"senior"` = `seniority` is more than 4 
:::

```{r}
#| label: double-pivot-for-summary-table
summary_table <- evals|>
  group_by(teacher_id)|>
  summarize(
    sex = first(sex),
    seniority = mean(seniority, na.rm = TRUE),
    academic_degree = first(academic_degree),
    .groups = "drop"
  )|>
  mutate(seniority_level = if_else(seniority <= 4, "Junior", "Senior"))|>
  count(sex,seniority_level, academic_degree)|>
  pivot_wider(names_from = c(sex, seniority_level, academic_degree), values_from = n)|>
  summarize(
    Male = sum(c(male_Junior_dr,
                 male_Junior_ma,
                 male_Junior_no_dgr,
                 male_Junior_prof,
                 male_Senior_dr,
                 male_Senior_ma,
                 male_Senior_no_dgr,
                 male_Senior_prof), na.rm = TRUE),
  Female = sum(c(female_Junior_dr,
                 female_Junior_ma,
                 female_Junior_no_dgr,
                 female_Junior_prof,
                 female_Senior_dr,
                 female_Senior_ma), na.rm = TRUE),
  "Junior (Less than 4 years)"  = sum(c(male_Junior_dr,
                 male_Junior_ma,
                 male_Junior_no_dgr,
                 male_Junior_prof,
                 female_Junior_dr,
                 female_Junior_ma,
                 female_Junior_no_dgr,
                 female_Junior_prof), na.rm = TRUE),
   "Senior (More than 4 years)" = sum(c(male_Senior_dr,
                 male_Senior_ma,
                 male_Senior_no_dgr,
                 male_Senior_prof,
                 female_Senior_dr,
                 female_Senior_ma), na.rm = TRUE),
  "No Degree" = sum(c(male_Senior_no_dgr,
                    male_Junior_no_dgr,
                    female_Junior_no_dgr), na.rm = TRUE),
  Masters = sum(c(male_Senior_ma,
                    male_Junior_ma,
                    female_Junior_ma,
                    female_Senior_ma), na.rm = TRUE),
  Doctorate = sum(c(male_Senior_dr,
                    male_Junior_dr,
                    female_Junior_dr,
                    female_Senior_dr), na.rm = TRUE),
  Professor = sum(c(male_Senior_prof,
                    male_Junior_prof,
                    female_Junior_prof), na.rm = TRUE)
  )
pretty_summary_table <- summary_table|>
   kable(caption = "Instructor Evaluations Demographics") |>
   kable_styling(bootstrap_options = c("striped", "hover", "condensed", "bordered"), 
                 full_width = TRUE, 
                 font_size = 14)
pretty_summary_table
```

::: {.callout-tip}
If you are interested in exploring my table fomatting, I specifically used the 
`kable()` function from the **knitr** package to first get an HTML table. Then
I styled that table using the `kable_styling()` function from the **kableExtra**
package. 
:::

## Lab 7

For our last problem, we will revisit a question from the most recent lab. 
Question 1 asked you to use `across()` to make a table which summarized: 

> What variable(s) have missing values present?  
> How many observations have missing values?

**4. Using `map_int()`, produce a nicely formatted table of the number of missing values for each variable in the `fish` data.** 

```{r}
#| label: map-missing-values-of-fish

missing_values_fish <- fish|>
  map_int(~sum(is.na(.)))|>
  enframe(name = "Variable Name", value = "Number of Missing Values")

missing_values_fish|>
  kable(caption = "Missing Values from Each Variable") |>
   kable_styling(bootstrap_options = c("striped", "hover", "condensed", "bordered"), 
                 full_width = TRUE, 
                 font_size = 14)
```
